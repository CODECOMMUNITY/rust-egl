/* automatically generated by rust-bindgen */

use std::libc::*;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type uint8_t = c_uchar;
pub type uint16_t = c_ushort;
pub type uint32_t = c_uint;
pub type uint64_t = c_ulong;
pub type int_least8_t = c_schar;
pub type int_least16_t = c_short;
pub type int_least32_t = c_int;
pub type int_least64_t = c_long;
pub type uint_least8_t = c_uchar;
pub type uint_least16_t = c_ushort;
pub type uint_least32_t = c_uint;
pub type uint_least64_t = c_ulong;
pub type int_fast8_t = c_schar;
pub type int_fast16_t = c_long;
pub type int_fast32_t = c_long;
pub type int_fast64_t = c_long;
pub type uint_fast8_t = c_uchar;
pub type uint_fast16_t = c_ulong;
pub type uint_fast32_t = c_ulong;
pub type uint_fast64_t = c_ulong;
pub type intptr_t = c_long;
pub type uintptr_t = c_ulong;
pub type intmax_t = c_long;
pub type uintmax_t = c_ulong;
pub struct Struct_ARect {
    left: int32_t,
    top: int32_t,
    right: int32_t,
    bottom: int32_t,
}
pub type ARect = Struct_ARect;
pub type Enum_Unnamed1 = c_uint;
pub static WINDOW_FORMAT_RGBA_8888: c_uint = 1;
pub static WINDOW_FORMAT_RGBX_8888: c_uint = 2;
pub static WINDOW_FORMAT_RGB_565: c_uint = 4;
pub type Struct_ANativeWindow = c_void;
pub type ANativeWindow = Struct_ANativeWindow;
pub struct Struct_ANativeWindow_Buffer {
    width: int32_t,
    height: int32_t,
    stride: int32_t,
    format: int32_t,
    bits: *mut c_void,
    reserved: [uint32_t, ..6u],
}
pub type ANativeWindow_Buffer = Struct_ANativeWindow_Buffer;
extern "C" {
    pub fn ANativeWindow_acquire(window: *mut ANativeWindow);
    pub fn ANativeWindow_release(window: *mut ANativeWindow);
    pub fn ANativeWindow_getWidth(window: *mut ANativeWindow) -> int32_t;
    pub fn ANativeWindow_getHeight(window: *mut ANativeWindow) -> int32_t;
    pub fn ANativeWindow_getFormat(window: *mut ANativeWindow) -> int32_t;
    pub fn ANativeWindow_setBuffersGeometry(window: *mut ANativeWindow,
                                            width: int32_t, height: int32_t,
                                            format: int32_t) -> int32_t;
    pub fn ANativeWindow_lock(window: *mut ANativeWindow,
                              outBuffer: *mut ANativeWindow_Buffer,
                              inOutDirtyBounds: *mut ARect) -> int32_t;
    pub fn ANativeWindow_unlockAndPost(window: *mut ANativeWindow) -> int32_t;
}
